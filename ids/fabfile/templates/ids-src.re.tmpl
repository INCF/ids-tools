# ids-src.re
#
# Rules that implement the policies and procedures for the
# INCF Dataspace go here
#
# Once this file has been modified, ids-sync-zone-rules 
# should be called. That will upload the source rules into
# the ICAT DB for this zone, push them to the configured
# rule file (incf.re), and then push the change to all the
# data servers in the zone.
#


# 
# Turn off the "Trash Can"
#
# Generally wastes space as users forget to purge their trash.
#
acTrashPolicy {
  msiNoTrashCan;
}


#
# Strict ACL checking
#
# Make sure that ACLs are honoured when browsing the namespace. 
# Users must have at least "read" permission to icd into, and ils
# collections and see the files.
#
acAclPolicy {
  msiAclPolicy("STRICT");
}


#
# By default, acPostProcForPut is not called for bulk updates, but we
# will set the acBulkPutPostProcPolicy so that it is called for each
# file, since this workflow is key for the operation of the archive.
#
acBulkPutPostProcPolicy {
  msiSetBulkPutPostProcPolicy("on");
}


#
# We don't really want user homes for users from the incf zone,
# so override acCreateUserF1 here. Checks for usernames with #incf
# (which are users) and names like ids-* (which are groups).
acCreateUserF1 {
  ON ($otherUserName like "\*#incf"
      || $otherUserName like "ids-*") {
    msiCreateUser ::: msiRollback;
    msiAddUserToGroup("public")  :::  msiRollback;
    msiCommit;
  }
}

# Don't let anybody set 'write' or 'own' permissions
# for the 'anonymous' user or 'public' group. The 
# resulting output on the client side is a bit "messy",
# but there is no other way to do this AFAIK.
#acPreProcForModifyAccessControl(*recursive, *access, *user, *zone, *path) {
#  on (*user == "anonymous" || *user == "public") {
#    if (*access == "write" || *access == "own") {
#      cut;
#      msiExit("1", "Can't set 'write' or 'own' for user *user");
#      fail;
#    }
#  }
#}

#
# These rules are the entry points for taking action
# after something happens in iRODS (the 'post-action'
# rules). One application is to generate audit events.
# 
# To turn on auditing, uncomment the rules below.
#
#acPostProcForOpen {
#  acAuditEvent("acPostProcForOpen", $objPath, $rescName);
#}
#acPostProcForCreate {
#  acAuditEvent("acPostProcForCreate", $objPath, $rescName);
#}
#acPostProcForPut {
#  acAuditEvent("acPostProcForPut", $objPath, $rescName);
#}
#acPostProcForCopy {
#  acAuditEvent("acPostProcForCopy", $objPath, $rescName);
#}
#acPostProcForRepl {
#  acAuditEvent("acPostProcForRepl", $objPath, $rescName);
#}
#acPostProcForDelete {
#  acAuditEvent("acPostProcForDelete", $objPath, $rescName);
#}
#acPostProcForCollCreate {
#  acAuditEvent("acPostProcForCollCreate", $collName);
#}
#acPostProcForRmColl {
#  acAuditEvent("acPostProcForRmColl", $collName);
#}
#acPostProcForFilePathReg {
#  acAuditEvent("acPostProcForFilePathReg", $objPath, $rescName, $filePath);
#}
#acPostProcForObjRename(*sourceObject, *destObject) {
#  acAuditEvent("acPostProcForObjRename", *sourceObject, *destObject);
#}
#acPostProcForModifyAccessControl(*recursive, *access, *user, *zone, *path) {
#  acAuditEvent("acPostProcForModifyAccessControl", *path, *user++"#"++*zone, *access, *recursive);
# add extra logic so that if somebody adds a permission (or 
# removes it) for the 'public' group, then the 'anonymous' 
# user is also given the same permission
#  if (*user == "public") {
#    if (*recursive == "1") {
#      msiSetACL("recursive", *access, "anonymous#*zone", *path);
#    }
#    else {
#      msiSetACL("default", *access, "anonymous#*zone", *path);
#    }
#  }
#}
#acPostProcForModifyAVUMetadata(*op, *type, *path, *a, *v, *u) {
#  acAuditEvent("acPostProcForModifyAVUMetadata", *path, *op, *type, *a, *v, *u);
#}
#acPostProcForModifyAVUMetadata(*op, *type, *path, *a, *v) {
#  acAuditEvent("acPostProcForModifyAVUMetadata", *path, *op, *type, *a, *v, "");
#}

#
# Rules that are used to generate and log audit events.
# DO NOT CHANGE 
#
acAuditEvent(*ruleName, *target, *arg1, *arg2, *arg3, *arg4, *arg5) {
  on (*ruleName == 'acPostProcForModifyAVUMetadata') {
    *p = "target=*target";
    *p = "*p operation=*arg1";
    *p = "*p targettype=*arg2";
    *p = "*p attrname=*arg3";
    *p = "*p attrval=*arg4";
    *p = "*p attrunits=*arg5";
    acLogAuditEvent(*ruleName, *p);
  }
}

acAuditEvent(*ruleName, *target, *arg1, *arg2, *arg3) {
  on (*ruleName == 'acPostProcForModifyAccessControl') {
    *p = "target=*target";
    *p = "*p targetuser=*arg1";
    *p = "*p access=*arg2";
    *p = "*p recursive=*arg3";
    acLogAuditEvent(*ruleName, *p);
  }
}

acAuditEvent(*ruleName, *target, *arg1, *arg2) {
  on (*ruleName == 'acPostProcForFilePathReg') {
    acLogAuditEvent(*ruleName, "target=*target resource=*arg1 srcpath=*arg2");
  }
}

acAuditEvent(*ruleName, *target, *arg1) {
  on (*ruleName == 'acPostProcForOpen') {
    acLogAuditEvent(*ruleName, "target=*target resource=*arg1");
  }
  on (*ruleName == 'acPostProcForCreate') {
    acLogAuditEvent(*ruleName, "target=*target resource=*arg1");
  }
  on (*ruleName == 'acPostProcForPut') {
    acLogAuditEvent(*ruleName, "target=*target resource=*arg1");
  }
  on (*ruleName == 'acPostProcForCopy') {
    acLogAuditEvent(*ruleName, "target=*target resource=*arg1");
  }
  on (*ruleName == 'acPostProcForRepl') {
    acLogAuditEvent(*ruleName, "target=*target resource=*arg1");
  }
  on (*ruleName == 'acPostProcForDelete') {
    acLogAuditEvent(*ruleName, "target=*target resource=*arg1");
  }
  on (*ruleName == 'acPostProcForObjRename') {
    acLogAuditEvent(*ruleName, "target=*target newname=*arg1");
  }
}

acAuditEvent(*ruleName, *target) {
  acLogAuditEvent(*ruleName, "target=*target");
}

acLogAuditEvent(*ruleName, *params) {
  msiGetSystemTime(*ts, "unix");
  *u = $userNameClient++'#'++$rodsZoneClient
  *argv = "*ruleName *ts *u *params"
  if (errorcode(msiExecCmd("ids-event-logger", *argv, "null", "null", "null", *rc)) < 0) {
    writeLine("serverLog", "ERROR: running ids-log-event");
  }
  else {
    msiGetStdoutInExecCmdOut(*rc, *stdout);
    if (*stdout like regex "^ERROR") {
      writeLine("serverLog", "ERROR: running ids-log-event: "++*stdout);
    }
  }
}

# end auditing rules section

# EOF
